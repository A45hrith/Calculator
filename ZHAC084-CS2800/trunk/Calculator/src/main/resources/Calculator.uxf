<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>790</x>
      <y>1550</y>
      <w>210</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
cs2800::Symbol
The main Symbol enumeration
class holding all the
required symols involved in
calculations
--
_Plus_
_Minus_
_Times_
_Divide_
_Left_Bracket_
_Right_Bracket_
_Invalid_
bg=orange
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1500</x>
      <y>1600</y>
      <w>210</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
cs2800::Type
All the possible datatypes
that can be used in this
Calculator are mentioned in
this class Type 
--
_Number_
_Symbol_
_String_
_Invalid_
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1130</x>
      <y>1290</y>
      <w>250</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>cs2800::Entry

--
*Attributes*
-number: float
-other: Symbol
-str: String
-type: Type
--
*Responsibilities*
&lt;&lt;constructor&gt;&gt; +Entry(float val)
&lt;&lt;constructor&gt;&gt; +Entry(Symbol sign)
&lt;&lt;constructor&gt;&gt; +Entry(String str)
+getType(): Type
+getValue(): float
		{Exception = BadType}
+getSymbol(): Symbol
		{Exception = BadType}
+getString(): String
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1370</x>
      <y>1430</y>
      <w>260</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;240.0;170.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>890</x>
      <y>1420</y>
      <w>260</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>240.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>1170</y>
      <w>30</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1150</x>
      <y>920</y>
      <w>210</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>CS2800::Stack
This class is created to
maintain the array of stack
--
*Attributes*
-i: integer
-enter: ArrayList&lt;Entry&gt;
--
*Responsibilities*
+push (digit: Entry)
	Push elements into the stack
+pop()
	{Exception = EmptyStack}
+top()
	{Exception = EmptyStack}
+size():integer
+isEmpty() : boolean
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>1170</y>
      <w>30</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>820</x>
      <y>770</y>
      <w>210</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>cs2800::NumStack
provides stack of numeric
values for reverse 
polish evaluation.
--
*Attributes*
-numStack: Stack 
--
*Responsibilities*
+push(i:float)
+pop(): popNum
	{Exception = EmptyStack}
+isEmpty():boolean
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>960</y>
      <w>270</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;250.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1410</x>
      <y>720</y>
      <w>260</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>cs2800::OpStack
This class is defined
to use a stack of symbols
for the shunting algorithm.
--
*Attributes*
-op_stack: Stack
-pop_symbol: Symbol
-top_symbol: Symbol
--
*Responsibilities*
+push(plus:Symbol)
+pop(): Object
	{Exception = BadType, EmptyStack}
+isEmpty():boolean
+top(): Symbol
	{Exception = BadType, EmptyStack}
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1350</x>
      <y>930</y>
      <w>80</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1350</x>
      <y>950</y>
      <w>460</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>440.0;10.0;440.0;160.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1690</x>
      <y>730</y>
      <w>210</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>cs2800::StrStack
This class is created to reverse
an expression as required by the
shunting algorithm for evaluation.
--
*Attributes*
-stack_str: Stack
-pop_str: String
--
*Responsibilities*
+push(string: String)
+isEmpty(): boolean
+pop(); Object
	{Exception = EmptyStack}
+getsize(): integer
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1220</x>
      <y>380</y>
      <w>320</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>cs2800::StandardCalc
A Standard calc expression
that will be converted to
postfix to be evaluated.
--
*Attributes*
-stakOp: OpStack
-stakStr: StrStack
-rpCalc: RevPolishCalc
--
*Responsibilities*
+evaluates(String:what):float
	{Exception = InvalidExpression, EmptyStack}
bg=yellow
+getSymbolValue(char c): Symbol
+precedence(char c): integer</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>400</y>
      <w>320</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>cs2800::RevPolishCalc
Class executes if exp is
postfix or and infix 
(converted to postfix 
through algorithm).
--
*Attributes*
-stak: NumStack
--
*Responsibilities*
+evaluates(String:what):float
	{Exception = InvalidExpression, EmptyStack}
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>700</y>
      <w>230</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
cs2800::Calculator
{Some Properties}
--
*Responsibilities*
+evaluates(String:what):float
	{Exception = InvalidExpression,
		EmptyStack}
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1020</x>
      <y>580</y>
      <w>120</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>100.0;190.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1310</x>
      <y>600</y>
      <w>80</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;100.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1520</x>
      <y>600</y>
      <w>90</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1530</x>
      <y>530</y>
      <w>320</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;300.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>970</x>
      <y>60</y>
      <w>390</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>&lt;&lt;model&gt;&gt;
cs2800::CalcModel
will evaluate if expression is infix or postfix.
--
*Attributes*
-revPolish: Calculator
-standard: Calculator
-calcAns: float
--
*Responsibilities*
+evaluate(String expr, boolean infix): float
	{Exception = InvalidExpression, EmptyStack, BadType}
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1050</x>
      <y>240</y>
      <w>90</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1240</x>
      <y>240</y>
      <w>100</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>10</y>
      <w>1190</w>
      <h>1830</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>30</y>
      <w>250</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>&lt;&lt;controller&gt;&gt;
cs2800::CalcController
Adds itself as an observer
to the view so that (asynchronous)
changes can be observed
--
*Attributes*
-model: CalcModel
-view: GuiView
-asci: Ascii
-isInfix: boolean
--
*Responsibilities*
+calculate()
	{Exception = InvalidExpression,
	BadType, EmptyStack}
This method is usde to calcualte the
answer to the expression.
bg=blue
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>240</x>
      <y>0</y>
      <w>330</w>
      <h>260</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>230</x>
      <y>410</y>
      <w>350</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
cs2800::ViewInteface

--
Responsibilities
+addCalcObserver(Observer f): void
+addTypeObserver(Consumer&lt;OpType&gt; l): void
+getQuestion(): String
+setAnswer(String a): void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>520</x>
      <y>120</y>
      <w>470</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;..</panel_attributes>
    <additional_attributes>450.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>50</x>
      <y>660</y>
      <w>240</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>&lt;&lt;view&gt;&gt;
cs2800::AsciiView
A menu based view
--
-question: String
-calc: Observer
--
Responsibilities
+menu
	{Exception = InvalidExpression,
	BadType, EmptyStack}

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>460</x>
      <y>700</y>
      <w>210</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>&lt;&lt;view&gt;&gt;
cs2800::GuiView
--
-primaryStage: Stage
-expression: String
-answer: String
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>560</y>
      <w>110</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>220</x>
      <y>560</y>
      <w>110</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>210</y>
      <w>30</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=&lt;..</panel_attributes>
    <additional_attributes>10.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>110</x>
      <y>210</y>
      <w>200</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>lt=&lt;..</panel_attributes>
    <additional_attributes>10.0;450.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>500</x>
      <y>210</y>
      <w>150</w>
      <h>510</h>
    </coordinates>
    <panel_attributes>lt=&lt;..</panel_attributes>
    <additional_attributes>130.0;490.0;130.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>370</y>
      <w>700</w>
      <h>520</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>340</x>
      <y>820</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>View Assembly
bg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>440</x>
      <y>220</y>
      <w>130</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Controller
bg=white</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1470</x>
      <y>120</y>
      <w>140</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Model Assembly
bg=white</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
